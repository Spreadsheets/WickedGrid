
// URL to access the service end points
var openUrl = "/loanpricer/services/LoanPricerODService";
var secureUrl = "/loanpricer/services/LoanPricerService";

// default values for service parameters
var defaultParameters = new Object();
defaultParameters.CasID = "0220457583";
defaultParameters.SearchString = "Apple";
defaultParameters.DealID = "0b015515800e300e";
defaultParameters.LogData = "Test LogData from Operate Screen";
defaultParameters.Currency = "USD";
defaultParameters.Version = "online";

// input parameters that needs to be sent as CDATA
var CDATA_Params = new Array();
CDATA_Params.push("SearchString");

// dynamic scroll settings
var row_height = 25;
var services_div_height_offset = 3;
var parameter_div_height_offset = 10;
var services_div_max_height = $(window).height() - 233;
var no_of_rows = 1;
var height_control;

// ajax call for web service invocation
function callLRCService(serviceName, type) {

	var startTime = new Date().getTime();

	if (type == "test" || type == "testAll") {
		$("#" + serviceName + "_Status").css("color", "#000");
		$("#" + serviceName + "_Status").html("Running...");
		$("#" + serviceName + "_StartTime").html(getCurrentTime(null));
		$("#" + serviceName + "_EndTime").html("");
		$("#" + serviceName + "_EventTime").html("");
	} else if (type == "display") {
		$("#wsResponseResultTxtArea").val("");
		$("#wsResponseHeaderText").html("Retrieving response for " + serviceName);
		$("#wsResponseDiv").show();
		$("#wsResponseLoadingImg").show();
	}

	var soapMessage = getSOAPMessage(serviceName);
	alert(soapMessage);
	var serviceUrl = ((isOpenService(serviceName) >= 0) ? openUrl : secureUrl);

	// jQuery AJAX call
	$.ajax({
        url: serviceUrl, 
        type: "POST",
        dataType: "xml",
        data: soapMessage,
        contentType: "text/xml",
        beforeSend: function(jqXHR) {
        	// set value for OPERATE_JANUS_SID request header for secured services 
        	if (isOpenService(serviceName) < 0) {
        		jqXHR.setRequestHeader("OPERATE_JANUS_SID", getJanusSID(serviceName));
        	}
        },
        timeout: 150000,
        success: function (data, status, jqXHR) {
        	// to get response XML string
        	var xmlTxt = jqXHR.responseText;
        	// to decode HTML entities back to respective characters 
        	xmlTxt = $("#wsResponseHiddenDiv").html(xmlTxt).text();
        	// uses the native parsing function of the browser to create a valid XML Document
        	var xmlDoc = $.parseXML(xmlTxt);
        	// to create a typical jQuery object that can be traversed and manipulated.
        	var $xml = $(xmlDoc);

        	if (type == "test" || type == "testAll") {
        		var endTime = new Date().getTime();
        		var timeDiff = endTime - startTime;
        		var returnCode = $xml.find("ReturnCode").text();

        		if (returnCode == 0) {
        			$("#" + serviceName + "_Status").css("color", "#339900");
        			$("#" + serviceName + "_Status").html("Success");
        			$("#" + serviceName + "_EndTime").html(getCurrentTime(null));
        			$("#" + serviceName + "_EventTime").html(timeDiff + "ms");
        		} else if (returnCode == 1) {
        			$("#" + serviceName + "_Status").css("color", "#ff3300");
        			$("#" + serviceName + "_Status").html("Failure");
        			$("#" + serviceName + "_EndTime").html(getCurrentTime(null));
        			$("#" + serviceName + "_EventTime").html(timeDiff + "ms");
        		}
        	} else if (type == "display") {
        		$("#wsResponseLoadingImg").hide();
        		$("#wsResponseHeaderText").html("Response XML for " + serviceName);
        		$("#wsResponseResultTxtArea").val(prettyPrint(xmlTxt));
        	}
        }, 
        error: function (jqXHR, status, error) {
        	if(status === "timeout") {
        		var endTime = new Date().getTime();
    			var timeDiff = endTime - startTime;
    			$("#" + serviceName + "_Status").css("color", "#ff3300");
    			$("#" + serviceName + "_Status").html("Time out");
    			$("#" + serviceName + "_EndTime").html(getCurrentTime(null));
    			$("#" + serviceName + "_EventTime").html(timeDiff + "ms");
            }
        }
    });
}

// prepares SOAP message for given service
function getSOAPMessage(serviceName) {
	var soapMessage = "";
	soapMessage = soapMessage + getSOAPEnvelopePrefix(serviceName);
	soapMessage = soapMessage + getSOAPBody(serviceName, getInputParameters(serviceName));
	soapMessage = soapMessage + getSOAPEnvelopeSuffix(serviceName);
	return soapMessage;
}

// prepares SOAP envelope prefix
function getSOAPEnvelopePrefix(serviceName) {
	var soapEnvelopePrefix = "";
	soapEnvelopePrefix = soapEnvelopePrefix + "<?xml version=\"1.0\" encoding=\"UTF-8\"?>";
	soapEnvelopePrefix = soapEnvelopePrefix + "<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" ";
	soapEnvelopePrefix = soapEnvelopePrefix + "xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" ";
	soapEnvelopePrefix = soapEnvelopePrefix + "xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"><soap:Body>";
	soapEnvelopePrefix = soapEnvelopePrefix + "<ns2:" + lowerCaseFirstLetter(serviceName);
	soapEnvelopePrefix = soapEnvelopePrefix + " xmlns:ns2=\"http://ws.loanpricer.jpmc.com\">";
	soapEnvelopePrefix = soapEnvelopePrefix + "<ns2:requestXML>";
	soapEnvelopePrefix = soapEnvelopePrefix + "&lt;";
	soapEnvelopePrefix = soapEnvelopePrefix + serviceName + ">";
	return soapEnvelopePrefix;
}

//prepares SOAP message body
function getSOAPBody(serviceName, serviceParameters) {
	var soapBody = "";
	var inputValueArray = new Array();

	for (var i = 0; i < serviceParameters.length; i++) {
		inputValueArray[i] = getUserInputValue(serviceName, serviceParameters[i]);
	}

	for (var i = 0; i < inputValueArray.length; i++) {
		soapBody = soapBody + "&lt;"
		soapBody = soapBody + serviceParameters[i];
		soapBody = soapBody + ">";

		var isCDATA = $.inArray(serviceParameters[i], CDATA_Params) >= 0;

		if (isCDATA) {
			soapBody = soapBody + "&lt;![CDATA[";
		}

		soapBody = soapBody + inputValueArray[i];

		if (isCDATA) {
			soapBody = soapBody + "]]&gt;";
		}

		soapBody = soapBody + "&lt;/";
		soapBody = soapBody + serviceParameters[i];
		soapBody = soapBody + ">";
	}

	return soapBody;
}

// prepares SOAP envelope suffix
function getSOAPEnvelopeSuffix(serviceName) {
	var soapEnvelopeSuffix = "";
	soapEnvelopeSuffix = soapEnvelopeSuffix + "&lt;/";
	soapEnvelopeSuffix = soapEnvelopeSuffix + serviceName + ">";
	soapEnvelopeSuffix = soapEnvelopeSuffix + "</ns2:requestXML>";
	soapEnvelopeSuffix = soapEnvelopeSuffix + "</ns2:" + lowerCaseFirstLetter(serviceName) + ">";
	soapEnvelopeSuffix = soapEnvelopeSuffix + "</soap:Body></soap:envelope>";
	return soapEnvelopeSuffix;
}

// makes the first letter to lower case
function lowerCaseFirstLetter(str) {
	return str.charAt(0).toLowerCase() + str.slice(1);
}

// returns input parameters array for given service name 
function getInputParameters(serviceName) {
	var parameterString = $("#" + serviceName + "_Parameters").val();

	var tempArray = parameterString.split(":");
	var inputParameters = new Array();

	for (var i = 1; i < tempArray.length; i++) {
		inputParameters[i-1] = tempArray[i];
	}

	return inputParameters;
}

//  returns input value entered or default value for given service, parameter
function getUserInputValue(serviceName, elementName) {
	var inputValue = $("#" + serviceName + "_" + elementName).val();

	if (inputValue == "" && inputValue.length == 0) {
		inputValue = defaultParameters[elementName];
	}

	return inputValue;
}

//checks whether the service is open or secured
function isOpenService(serviceName) {
	return openServicesList.indexOf(serviceName);
}

//  for JANUS_SID - returns entered SID value or loggedInUserId
function getJanusSID(serviceName) {
	var inputValue = $("#" + serviceName + "_SID").val();

	if (inputValue == "" || inputValue.length == 0) {
		inputValue = defaultParameters["SID"];
	}

	return inputValue.toUpperCase();
}

// toggles (show/hide) input parameters row
function toggleRequestParameterDiv(serviceName) {

	var toggle = $("#" + serviceName + "_input_toggle").prop("value");
	var noOfParams = getNoOfParams(serviceName); 

	var input_parameters_div_height = (noOfParams * row_height) + parameter_div_height_offset;

	if (toggle == "Show Parameters") {
		height_control = height_control + input_parameters_div_height;

		$("#" + serviceName + "_input_row").show();
		$("#" + serviceName + "_input_toggle").prop("value", "Hide Parameters");
		$("#" + serviceName + "_input_toggle").css("background-color", "#596779");
		
	} else if (toggle == "Hide Parameters") {
		height_control = height_control - input_parameters_div_height;

		$("#" + serviceName + "_input_row").hide();
		$("#" + serviceName + "_input_toggle").prop("value", "Show Parameters");
		$("#" + serviceName + "_input_toggle").css("background-color", "#003366");
	}

	// sets serviceListDiv height based on conditions
	if (height_control <= services_div_max_height) {
		$("#serviceListDiv").height(height_control);
	} else {
		$("#serviceListDiv").height(services_div_max_height);
	}
}

// returns no of input parameters for given service name
function getNoOfParams(serviceName) {
	return getInputParameters(serviceName).length;
}

// returns current time in format HH24 : MI : SS
function getCurrentTime(useThisDate) {
	var currentDate = (null != useThisDate) ? useThisDate : new Date();
	var h = currentDate.getHours();
	var hh = h < 10 ? "0" + h : h;
	var m = currentDate.getMinutes();
	var mm = m < 10 ? "0" + m : m;
	var s = currentDate.getSeconds();
	var ss = s < 10 ? "0" + s : s;

	return hh + " : " + mm + " : " + ss;
}

// to pretty print the xml string
function prettyPrint(xml) {
	var formatted = "";
	var reg = /(>) (<)(\/*)/g;
	xml = xml.replace(reg, "$1\r\n$2$3");
	var pad = 0;

	$.each(xml.split("\r\n"), function(index, node) {
		var indent = 0;
		if (node.match(/.+<\/\w[^>]*>$/)) {
			indent = 0;
		} else if (node.match(/^<\/\w/)) {
			if (pad != 0) {
				pad -= 1;
			}
		} else if (node.match(/^<\w[^>]*[^\/]>.*$/)) {
			indent = 1;
		} else {
			indent = 0;
		}

		var padding = "";
		for (var i = 0; i < pad; i++) {
			padding += "  ";
		}

		formatted += padding + node + "\r\n";
		pad += indent;
	});

	return formatted;
}
